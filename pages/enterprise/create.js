
import Head from 'next/head'
import CloseIconNavWithTitle from '../../components/navigators/closeIconNavWithTitle'
import EnterpriseTypeMenu from '../../components/enterprise/enterprisetypeMenu'
import PersonalInfoMenu from '../../components/enterprise/personalinfo/personalInfoMenu'
import EnterpriseInfoMenu from '../../components/enterprise/enterpriseInfo/enterpriseInfo'
import ExecutionInfoMenu from '../../components/enterprise/executionInfo/executionInfoMenu'
import PublicInfoMenu from '../../components/enterprise/publicInfo/publicInfo'
import VerifyandSendMenu from '../../components/enterprise/verifyandsend/verifyandsendMenu'
import { Tab } from '@headlessui/react'
import { useState } from 'react'
import { AuthAction, withAuthUser, withAuthUserTokenSSR } from 'next-firebase-auth'
import { useSSrClientApollo } from '../../lib/Auth'
import { userInDatabase } from '../../queries/getUser'



const SignupEnterprise = () => {
    const [selectedIndex, setSelectedIndex] = useState(0)


    const reValidateEnterpriseType = (event) => {
        event.preventDefault()
        setSelectedIndex(0)
    }


    const validateEnterpriseTypePage = (event) => {
        event.preventDefault()
        setSelectedIndex(1)
    }

    const validatePersonnalInformationPage = (event) => {
        event.preventDefault()
        setSelectedIndex(2)
    }

    const validateEnterpriseInformation = (event) => {
        event.preventDefault()
        setSelectedIndex(3)
    }

    const validateExecutionInfo = (event) => {
        event.preventDefault()
        setSelectedIndex(4)
    }

    const validatePublicEnterpriseInformation = (event) => {
        event.preventDefault()
        setSelectedIndex(5)
    }

    

    return (
        <div>
            <Head>
                <title>Enregistrer une entreprise</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main>
                <div className="flex flex-col w-full h-full">
                    <CloseIconNavWithTitle title={"Creer une entreprise"}></CloseIconNavWithTitle>
                    <Tab.Group selectedIndex={selectedIndex} onChange={setSelectedIndex} as="div">
                        <Tab.List className="flex w-full h-auto space-x-4 bg-gray-900/10">
                            <Tab className={`flex ${selectedIndex == 0 ? 'bg-black text-white' : ""} py-3 px-2 h-auto w-auto outline-none `}>Type d'entreprise</Tab>
                            <Tab className={`flex ${selectedIndex == 1 ? 'bg-black text-white' : ""} py-3 px-2 h-auto w-auto outline-none `}>Informations personnelles</Tab>
                            <Tab className={`flex ${selectedIndex == 2 ? 'bg-black text-white' : ""} py-3 px-2 h-auto w-auto outline-none `}>Informations sur l'entreprise</Tab>
                            <Tab className={`flex ${selectedIndex == 3 ? 'bg-black text-white' : ""} py-3 px-2 h-auto w-auto outline-none `}>Informations d'exécution</Tab>
                            <Tab className={`flex ${selectedIndex == 4 ? 'bg-black text-white' : ""} py-3 px-2 h-auto w-auto outline-none `}>Informations publiques</Tab>
                            <Tab className={`flex ${selectedIndex == 5 ? 'bg-black text-white' : ""} py-3 px-2 h-auto w-auto outline-none `}>Vérifier et terminer</Tab>
                        </Tab.List>
                        <div className="grid grid-cols-2 gap-4 h-full">
                            <div className='px-4 sm:px-0 mt-10'>
                                <Tab.Panels>
                                    <Tab.Panel className="flex items-center justify-center">
                                        <EnterpriseTypeMenu onClick={validateEnterpriseTypePage}></EnterpriseTypeMenu>
                                    </Tab.Panel>
                                    <Tab.Panel className="flex items-center justify-center">
                                        <PersonalInfoMenu onClick={validatePersonnalInformationPage}></PersonalInfoMenu>
                                    </Tab.Panel>
                                    <Tab.Panel className="flex items-center justify-center">
                                        <EnterpriseInfoMenu onClick={validateEnterpriseInformation}></EnterpriseInfoMenu>
                                    </Tab.Panel>
                                    <Tab.Panel className="flex items-center justify-center">
                                        <ExecutionInfoMenu onClick={validateExecutionInfo}></ExecutionInfoMenu>
                                    </Tab.Panel>
                                    <Tab.Panel className="flex items-center justify-center">
                                        <PublicInfoMenu onClick={validatePublicEnterpriseInformation}></PublicInfoMenu>
                                    </Tab.Panel>
                                    <Tab.Panel className="flex items-center justify-center">
                                        <VerifyandSendMenu reValidateEnterpriseType={reValidateEnterpriseType} validateEnterpriseTypePage={validateEnterpriseTypePage} validatePersonnalInformationPage={validatePersonnalInformationPage} validateEnterpriseInformation={validateEnterpriseInformation}></VerifyandSendMenu>
                                    </Tab.Panel>
                                </Tab.Panels>
                            </div>
                            <div className='flex h-full'>
                                <div className='bg-gray-100 w-full h-screen'></div>
                            </div>
                        </div>
                    </Tab.Group>
                </div>
            </main>


        </div>
    )
}


export const getServerSideProps = withAuthUserTokenSSR({
    whenUnauthed: AuthAction.REDIRECT_TO_LOGIN,
  })(async ({ AuthUser }) => {
    const token = await AuthUser.getIdToken()
    const client = useSSrClientApollo(token)
   const {data, error} = await userInDatabase(AuthUser.id, client)
   if(!error && data.userExist) {
    return {
        props: {},
        redirect: '/',
    }
   }else{
    return {
        props: {}
    }
   }
  })


export default withAuthUser({whenUnauthedAfterInit: AuthAction.REDIRECT_TO_LOGIN})(SignupEnterprise)